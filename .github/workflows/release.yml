name: "Tauri Windows Release (Inline Key, Secret Password)"

on:
  push:
    branches:
      - main

jobs:
  build-and-release-windows:
    runs-on: windows-latest
    steps:
      - name: 🛒 Checkout code
        uses: actions/checkout@v4

      - name: 🪟 Install Windows dependencies
        run: choco install -y wixtoolset nsis

      - name: 🦀 Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: 🧩 Setup pnpm & Node.js
        uses: pnpm/action-setup@v4
        with:
          version: 8
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm

      - name: 📦 Install frontend dependencies
        run: pnpm install --no-frozen-lockfile

      - name: ✍️ Write inline private key
        run: |
          Set-Content -Path "src-tauri\signing_private.pem" -Value @"
          -----BEGIN RSA PRIVATE KEY-----
          dW50cnVzdGVkIGNvbW1lbnQ6IHJzaWduIGVuY3J5cHRlZCBzZWNyZXQga2V5ClJXUlRZMEl5TGtjRWljNldBemVUMnU2MjIxUTFUc29xMGVuU1dOUFFzdWN5MXQ1cUEzQUFBQkFBQUFBQUFBQUFBQUlBQUFBQXA4VEFJY0hXSDl2SnNvM2w3TGFDWm5YY1ljbitsNWcySWF4bTB4Q3kyMWZJZmcvTzkvN01kR21UZmRzUS9YOHlaQ0ErR2hZVTF1bE1KWU1VWVRtVDZLa0o2ei83UHU1Y2swT09VMEZ3OGxVUlNydUVEMEtKRFZBNnd2K2p0a2Y4bk5RRHZiT2ZVWHc9Cg==
          -----END RSA PRIVATE KEY-----
          "@"
        # no-env: writes file directly, avoid echoing into logs

      - name: 🚀 Build and Release Windows with Tauri
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }} # misuse env to hold password
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          tagName: "v__VERSION__"
          releaseName: "Windows Release v__VERSION__"
          releaseBody: "Windows installer and signature"
          releaseDraft: false
          prerelease: false
          includeUpdaterJson: false


  post-release-windows:
    needs: build-and-release-windows
    runs-on: ubuntu-latest
    steps:
      - name: 🛒 Checkout repository
        uses: actions/checkout@v4

      - name: 🔢 Get tag version
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: 🧾 Create latest.json
        run: |
          VERSION=${{ steps.get_version.outputs.version }}
          DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          URL="https://github.com/${{ github.repository }}/releases/download/v${VERSION}/Siri Billing App_${VERSION}_x64-setup.exe"
          SIG_URL="https://github.com/${{ github.repository }}/releases/download/v${VERSION}/Siri Billing App_${VERSION}_x64-setup.exe.sig"
          cat <<EOF > latest.json
          {
            "version": "${VERSION}",
            "date": "${DATE}",
            "notes": "Windows release ${VERSION}",
            "platform": {
              "windows": {
                "url": "${URL}",
                "signature": "${SIG_URL}"
              }
            }
          }
          EOF

      - name: 📤 Upload latest.json to Release
        uses: softprops/action-upload-release-asset@v1
        with:
          tag: v${{ steps.get_version.outputs.version }}
          asset_path: latest.json
          asset_name: latest.json
          asset_content_type: application/json
