name: "Tauri Windows Release (Tag-Based, Reliable)"

on:
  push:
    tags:
      - 'v*'   # Trigger only on tags like v0.1.0
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  build-and-release-windows:
    runs-on: windows-latest
    steps:
      - name: 🛒 Checkout code
        uses: actions/checkout@v4

      - name: 🪟 Install Windows dependencies
        run: choco install -y wixtoolset nsis gh

      - name: 🦀 Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: 🧩 Setup pnpm & Node.js
        uses: pnpm/action-setup@v4
        with:
          version: 8
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm

      - name: 📦 Install frontend dependencies
        run: pnpm install --no-frozen-lockfile

      - name: 🗝️ Write raw private key to file
        run: |
          echo "-----BEGIN PRIVATE KEY-----" > src-tauri/signing_private.pem
          echo "${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}" >> src-tauri/signing_private.pem
          echo "-----END PRIVATE KEY-----" >> src-tauri/signing_private.pem

      - name: 🔖 Set version from tag
        shell: pwsh
        run: |
          if ($env:GITHUB_REF -match 'refs/tags/(.*)$') {
              $version = $matches[1]
              echo "VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          } else {
              throw "Not a tag push - invalid GITHUB_REF: $env:GITHUB_REF"
          }

      - name: 🚀 Build Windows release with Tauri
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          tagName: "${{ env.VERSION }}"
          releaseName: "Windows Release ${{ env.VERSION }}"
          releaseBody: "Windows installer and signature"
          releaseDraft: false
          prerelease: false
          includeUpdaterJson: false

  post-release-windows:
    needs: build-and-release-windows
    runs-on: windows-latest
    steps:
      - name: 🛒 Checkout repository
        uses: actions/checkout@v4

      - name: 🧾 Create latest.json
        shell: pwsh
        run: |
          $Version = $env:VERSION
          $Date = Get-Date -Format s
          $URL = "https://github.com/${{ github.repository }}/releases/download/$Version/Siri Billing App_${Version}_x64-setup.exe"
          $SIG_URL = "https://github.com/${{ github.repository }}/releases/download/$Version/Siri Billing App_${Version}_x64-setup.exe.sig"

          $latestJson = @"
          {
            "version": "$Version",
            "date": "$Date",
            "notes": "Windows release $Version",
            "platform": {
              "windows": {
                "url": "$URL",
                "signature": "$SIG_URL"
              }
            }
          }
          "@

          $latestJson | Out-File -Encoding UTF8 latest.json

      - name: 📤 Upload all release artifacts dynamically
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh auth setup-git

          $Version = $env:VERSION
          Write-Host "Using release tag: $Version"

          # Ensure the release exists
          $releaseExists = $false
          try {
              gh release view "$Version" -R $env:GITHUB_REPOSITORY | Out-Null
              $releaseExists = $true
          } catch {
              Write-Host "Release $Version does not exist yet."
          }

          if (-not $releaseExists) {
              Write-Host "Creating release $Version..."
              gh release create "$Version" --title "Windows Release $Version" --notes "Automatic release from workflow" -R $env:GITHUB_REPOSITORY
          }

          # Upload all artifacts
          $folders = @(
              "src-tauri/target/release/bundle/msi",
              "src-tauri/target/release/bundle/nsis"
          )

          foreach ($folder in $folders) {
              if (Test-Path $folder) {
                  Get-ChildItem -Path $folder -File | ForEach-Object {
                      Write-Host "Uploading $($_.FullName)..."
                      gh release upload "$Version" $_.FullName --clobber -R $env:GITHUB_REPOSITORY
                  }
              }
          }

          # Upload latest.json
          gh release upload "$Version" latest.json --clobber -R $env:GITHUB_REPOSITORY
