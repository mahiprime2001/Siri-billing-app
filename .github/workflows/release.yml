name: "Tauri Cross-Platform Auto Release"

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  actions: read

jobs:
  build-and-release:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-latest"
            args: "--target aarch64-apple-darwin"
          - platform: "macos-latest"
            args: "--target x86_64-apple-darwin"
          - platform: "ubuntu-22.04"
            args: ""
          - platform: "windows-latest"
            args: ""

    runs-on: ${{ matrix.platform }}

    steps:
      - name: 🛒 Checkout code
        uses: actions/checkout@v4

      - name: 🧩 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: ⚙️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm

      - name: 🐧 Install Linux dependencies
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev \
            patchelf libjavascriptcoregtk-4.1-dev libsoup-3.0-dev pkg-config clang

      - name: 🍎 Install macOS dependencies
        if: matrix.platform == 'macos-latest'
        run: |
          brew update
          brew install gtk+3 webkit2gtk pkg-config cairo pango gdk-pixbuf libpng jpeg

      - name: 🪟 Install Windows dependencies
        if: matrix.platform == 'windows-latest'
        run: |
          choco install -y wixtoolset nsis

      - name: 🦀 Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: 🧱 Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"

      - name: 📦 Install frontend dependencies
        run: pnpm install --no-frozen-lockfile

      # ⛔ Removed frontend build step since Tauri handles it automatically

      - name: 🚀 Build and Release with Tauri
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          tagName: "v__VERSION__"
          releaseName: "Release v__VERSION__"
          releaseBody: "See the assets to download and install this version."
          releaseDraft: true
          prerelease: false
          includeUpdaterJson: true
          args: ${{ matrix.args }}

  post-release:
    name: 🧩 Version Bump & latest.json Update
    runs-on: ubuntu-latest
    needs: [build-and-release]
    steps:
      - name: 🛒 Checkout repository
        uses: actions/checkout@v4

      - name: ⚙️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm

      - name: 🧩 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: 🔢 Bump version
        id: bump
        run: |
          VERSION=$(pnpm exec tauri version | grep -oE '[0-9]+\.[0-9]+\.[0-9]+')
          echo "Current version: $VERSION"
          NEW_VERSION=$(pnpm exec semver $VERSION -i patch)
          echo "New version: $NEW_VERSION"
          pnpm exec tauri version --set $NEW_VERSION
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: 🧾 Generate latest.json
        run: |
          mkdir -p dist
          echo '{
            "version": "${{ steps.bump.outputs.version }}",
            "notes": "Automated build via GitHub Actions",
            "pub_date": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'",
            "platforms": {
              "windows-x86_64": { "url": "https://github.com/${{ github.repository }}/releases/download/v${{ steps.bump.outputs.version }}/app_${{ steps.bump.outputs.version }}_x64_en-US.msi.zip" },
              "linux-x86_64": { "url": "https://github.com/${{ github.repository }}/releases/download/v${{ steps.bump.outputs.version }}/app_${{ steps.bump.outputs.version }}_amd64.AppImage.tar.gz" },
              "macos-x86_64": { "url": "https://github.com/${{ github.repository }}/releases/download/v${{ steps.bump.outputs.version }}/app_${{ steps.bump.outputs.version }}_x64.dmg" },
              "macos-aarch64": { "url": "https://github.com/${{ github.repository }}/releases/download/v${{ steps.bump.outputs.version }}/app_${{ steps.bump.outputs.version }}_aarch64.dmg" }
            }
          }' > dist/latest.json

      - name: 🧷 Commit and push changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "chore: bump version to ${{ steps.bump.outputs.version }} and update latest.json"
          git push origin main
