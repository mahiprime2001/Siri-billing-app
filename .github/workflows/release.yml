name: "Tauri Windows Release (Dynamic Upload with Auto Release)"

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  build-and-release-windows:
    runs-on: windows-latest
    steps:
      - name: 🛒 Checkout code
        uses: actions/checkout@v4

      - name: 🪟 Install Windows dependencies
        run: choco install -y wixtoolset nsis gh

      - name: 🦀 Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: 🧩 Setup pnpm & Node.js
        uses: pnpm/action-setup@v4
        with:
          version: 8
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm

      - name: 📦 Install frontend dependencies
        run: pnpm install --no-frozen-lockfile

      - name: 🗝️ Write raw private key to file
        run: |
          echo "-----BEGIN PRIVATE KEY-----" > src-tauri/signing_private.pem
          echo "${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}" >> src-tauri/signing_private.pem
          echo "-----END PRIVATE KEY-----" >> src-tauri/signing_private.pem

      - name: 🚀 Build Windows release with Tauri
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          tagName: "v__VERSION__"
          releaseName: "Windows Release v__VERSION__"
          releaseBody: "Windows installer and signature"
          releaseDraft: false
          prerelease: false
          includeUpdaterJson: false

  post-release-windows:
    needs: build-and-release-windows
    runs-on: windows-latest
    steps:
      - name: 🛒 Checkout repository
        uses: actions/checkout@v4

      - name: 🔢 Get tag version
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: 🧾 Create latest.json
        shell: pwsh
        run: |
          $Version = "${{ steps.get_version.outputs.version }}"
          $Date = Get-Date -Format s
          $URL = "https://github.com/${{ github.repository }}/releases/download/v$Version/Siri Billing App_${Version}_x64-setup.exe"
          $SIG_URL = "https://github.com/${{ github.repository }}/releases/download/v$Version/Siri Billing App_${Version}_x64-setup.exe.sig"

          $latestJson = @"
          {
            "version": "$Version",
            "date": "$Date",
            "notes": "Windows release $Version",
            "platform": {
              "windows": {
                "url": "$URL",
                "signature": "$SIG_URL"
              }
            }
          }
          "@

          $latestJson | Out-File -Encoding UTF8 latest.json

      - name: 📤 Upload all release artifacts dynamically (auto-create release)
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh auth setup-git

          $Version = "${{ steps.get_version.outputs.version }}"

          # Check if release exists
          try {
            gh release view "v$Version" -R $env:GITHUB_REPOSITORY -q . > $null
            Write-Host "Release v$Version already exists."
          } catch {
            Write-Host "Release v$Version not found, creating it..."
            gh release create "v$Version" --title "Windows Release v$Version" --notes "Automatic release from workflow" -R $env:GITHUB_REPOSITORY
          }

          # Folders containing build artifacts
          $folders = @(
            "src-tauri/target/release/bundle/msi",
            "src-tauri/target/release/bundle/nsis"
          )

          foreach ($folder in $folders) {
            if (Test-Path $folder) {
              Get-ChildItem -Path $folder -File | ForEach-Object {
                Write-Host "Uploading $($_.FullName)..."
                gh release upload "v$Version" $_.FullName --clobber -R $env:GITHUB_REPOSITORY
              }
            }
          }

          # Upload latest.json as well
          gh release upload "v$Version" latest.json --clobber -R $env:GITHUB_REPOSITORY
