name: "Tauri Windows Release (Tag-Based, Reliable)"

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  build-and-release-windows:
    runs-on: windows-latest
    outputs:
      VERSION: ${{ steps.set_version.outputs.VERSION }}
    steps:
      - name: üõí Checkout code
        uses: actions/checkout@v4

      - name: ü™ü Install Windows dependencies
        run: choco install -y wixtoolset nsis gh

      - name: ü¶Ä Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: üß© Setup pnpm & Node.js
        uses: pnpm/action-setup@v4
        with:
          version: 8
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm

      - name: üì¶ Install frontend dependencies
        run: pnpm install --no-frozen-lockfile

      - name: üóùÔ∏è Write raw private key to file
        run: |
          echo "-----BEGIN PRIVATE KEY-----" > src-tauri/signing_private.pem
          echo "${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}" >> src-tauri/signing_private.pem
          echo "-----END PRIVATE KEY-----" >> src-tauri/signing_private.pem

      - name: üîñ Set version from tag
        id: set_version
        run: |
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: üöÄ Build Windows release with Tauri
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          tagName: "${{ env.VERSION }}"
          releaseName: "Windows Release ${{ env.VERSION }}"
          releaseBody: "Windows installer and signature"
          releaseDraft: false
          prerelease: false
          includeUpdaterJson: false

  post-release-windows:
    needs: build-and-release-windows
    runs-on: windows-latest
    steps:
      - name: üõí Checkout repository
        uses: actions/checkout@v4

      - name: ‚öôÔ∏è Setup GitHub CLI
        run: choco install -y gh

      - name: üîÅ Restore VERSION
        run: echo "VERSION=${{ needs.build-and-release-windows.outputs.VERSION }}" >> $env:GITHUB_ENV

      - name: üßæ Create latest.json
        shell: pwsh
        run: |
          $Version = $env:VERSION
          if (-not $Version) { throw "VERSION is empty!" }
          $Date = Get-Date -Format s
          $URL = "https://github.com/${{ github.repository }}/releases/download/$Version/Siri Billing App_${Version}_x64-setup.exe"
          $SIG_URL = "https://github.com/${{ github.repository }}/releases/download/$Version/Siri Billing App_${Version}_x64-setup.exe.sig"

          $latestJson = @"
          {
            "version": "$Version",
            "date": "$Date",
            "notes": "Windows release $Version",
            "platform": {
              "windows": {
                "url": "$URL",
                "signature": "$SIG_URL"
              }
            }
          }
          "@

          $latestJson | Out-File -Encoding UTF8 latest.json

      - name: üì§ Upload all release artifacts dynamically
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh auth setup-git

          $Version = $env:VERSION
          Write-Host "Checking for release: $Version"

          # Retry logic: Wait for release to appear
          $maxRetries = 5
          $delay = 5
          for ($i=1; $i -le $maxRetries; $i++) {
              try {
                  gh release view "$Version" -R $env:GITHUB_REPOSITORY | Out-Null
                  Write-Host "‚úÖ Release $Version found."
                  break
              } catch {
                  if ($i -eq $maxRetries) { throw "‚ùå Release $Version not found after $maxRetries attempts." }
                  Write-Host "‚è≥ Release not found yet. Retrying in $delay seconds..."
                  Start-Sleep -Seconds $delay
              }
          }

          $folders = @(
              "src-tauri/target/release/bundle/msi",
              "src-tauri/target/release/bundle/nsis"
          )

          foreach ($folder in $folders) {
              if (Test-Path $folder) {
                  Get-ChildItem -Path $folder -File | ForEach-Object {
                      Write-Host "Uploading $($_.FullName)..."
                      gh release upload "$Version" $_.FullName --clobber -R $env:GITHUB_REPOSITORY
                  }
              }
          }

          gh release upload "$Version" latest.json --clobber -R $env:GITHUB_REPOSITORY
