name: "Tauri Windows Release (Auto Tag + Push-Based)"

on:
  push:
    branches:
      - main   # Run every push to main
  workflow_dispatch: # Allow manual trigger too

permissions:
  contents: write
  packages: write

jobs:
  auto-tag:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.create_tag.outputs.version }}
    steps:
      - name: üõí Checkout repository
        uses: actions/checkout@v4

      - name: üè∑Ô∏è Auto-increment version tag (Safe)
        id: create_tag
        run: |
          # Get the latest tag or default to v0.1.0
          TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.1.0")
          echo "Current tag: $TAG"

          BASE=${TAG#v}
          IFS='.' read -r major minor patch <<< "$BASE"

          # Find next available tag up to 20 increments
          for i in $(seq 1 20); do
            NEXT_TAG="v$major.$minor.$((patch + i))"
            if ! git ls-remote --tags origin | grep -q "refs/tags/$NEXT_TAG"; then
              NEW_TAG=$NEXT_TAG
              break
            fi
          done

          if [ -z "$NEW_TAG" ]; then
            echo "‚ùå Could not find next free tag (too many existing)."
            exit 1
          fi

          echo "‚úÖ New tag: $NEW_TAG"
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git tag $NEW_TAG
          git push origin $NEW_TAG
          echo "version=$NEW_TAG" >> $GITHUB_OUTPUT

  build-and-release-windows:
    needs: auto-tag
    runs-on: windows-latest
    env:
      VERSION: ${{ needs.auto-tag.outputs.version }}
    steps:
      - name: üõí Checkout code
        uses: actions/checkout@v4

      - name: ü™ü Install Windows dependencies
        run: choco install -y wixtoolset nsis gh

      - name: ü¶Ä Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: üß© Setup pnpm & Node.js
        uses: pnpm/action-setup@v4
        with:
          version: 8
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm

      - name: üì¶ Install frontend dependencies
        run: pnpm install --no-frozen-lockfile

      - name: üóùÔ∏è Write raw private key to file
        run: |
          echo "-----BEGIN PRIVATE KEY-----" > src-tauri/signing_private.pem
          echo "${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}" >> src-tauri/signing_private.pem
          echo "-----END PRIVATE KEY-----" >> src-tauri/signing_private.pem

      - name: üöÄ Build Windows release with Tauri
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          tagName: "${{ env.VERSION }}"
          releaseName: "Windows Release ${{ env.VERSION }}"
          releaseBody: "Automatic Windows release"
          releaseDraft: false
          prerelease: false
          includeUpdaterJson: false

  post-release-windows:
    needs: build-and-release-windows
    runs-on: windows-latest
    env:
      VERSION: ${{ needs.auto-tag.outputs.version }}
    steps:
      - name: üõí Checkout repository
        uses: actions/checkout@v4

      - name: üßæ Create latest.json
        shell: pwsh
        run: |
          $Version = $env:VERSION
          $Date = Get-Date -Format s
          $URL = "https://github.com/${{ github.repository }}/releases/download/$Version/Siri Billing App_${Version}_x64-setup.exe"
          $SIG_URL = "$URL.sig"

          $latestJson = @"
          {
            "version": "$Version",
            "date": "$Date",
            "notes": "Windows release $Version",
            "platform": {
              "windows": {
                "url": "$URL",
                "signature": "$SIG_URL"
              }
            }
          }
          "@

          $latestJson | Out-File -Encoding UTF8 latest.json

      - name: üì§ Upload all release artifacts
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh auth setup-git
          $Version = $env:VERSION
          Write-Host "üì¶ Uploading release assets for $Version..."

          $folders = @(
              "src-tauri/target/release/bundle/msi",
              "src-tauri/target/release/bundle/nsis"
          )

          foreach ($folder in $folders) {
              if (Test-Path $folder) {
                  Get-ChildItem -Path $folder -File | ForEach-Object {
                      Write-Host "‚û°Ô∏è Uploading $($_.FullName)..."
                      gh release upload "$Version" $_.FullName --clobber -R $env:GITHUB_REPOSITORY
                  }
              }
          }

          gh release upload "$Version" latest.json --clobber -R $env:GITHUB_REPOSITORY
