name: "Tauri Cross-Platform Auto Release"

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write

jobs:
  calculate-version:
    runs-on: ubuntu-22.04
    outputs:
      next_version: ${{ steps.calculate.outputs.version }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup tools
        run: sudo apt-get install -y jq

      - name: Calculate next version
        id: calculate
        run: |
          PREV_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$PREV_TAG" ]; then
            RANGE=""
          else
            RANGE="$PREV_TAG..HEAD"
          fi

          if git log $RANGE --pretty=%B | grep -q "BREAKING CHANGE"; then
            TYPE="major"
          elif git log $RANGE --pretty=%B | grep -q "^feat:"; then
            TYPE="minor"
          elif git log $RANGE --pretty=%B | grep -q "^fix:"; then
            TYPE="patch"
          else
            TYPE="patch"
          fi

          TAURI_FILE=src-tauri/tauri.conf.json
          PKG_FILE=package.json

          OLD_VERSION=$(jq -r '.version' $TAURI_FILE)
          if [ -z "$OLD_VERSION" ] || [ "$OLD_VERSION" = "null" ]; then
            echo "‚ùå Could not find version in $TAURI_FILE"
            exit 1
          fi

          IFS='.' read -r MAJOR MINOR PATCH <<< "$OLD_VERSION"

          case "$TYPE" in
            major) MAJOR=$((MAJOR+1)); MINOR=0; PATCH=0 ;;
            minor) MINOR=$((MINOR+1)); PATCH=0 ;;
            patch) PATCH=$((PATCH+1)) ;;
          esac

          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "Calculated next version: $OLD_VERSION -> $NEW_VERSION"

          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

  build:
    needs: calculate-version
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-22.04, windows-latest, macos-latest]
    runs-on: ${{ matrix.platform }}
    env:
      VERSION: ${{ needs.calculate-version.outputs.next_version }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASS: ${{ secrets.DB_PASS }}
      DB_NAME: ${{ secrets.DB_NAME }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
      TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Linux dependencies
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.1-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf \
            libjavascriptcoregtk-4.1-dev \
            libsoup-3.0-dev \
            pkg-config \
            clang

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            node_modules
          key: ${{ runner.os }}-deps-${{ hashFiles('**/pnpm-lock.yaml', '**/yarn.lock', '**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-deps-

      - name: Install frontend dependencies
        run: |
          corepack enable
          pnpm install --frozen-lockfile || npm install

      - name: Build frontend
        run: pnpm build || npm run build

      - name: Install Tauri CLI
        run: cargo install tauri-cli --locked

      - name: Build Tauri App
        run: pnpm tauri build || npm run tauri build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tauri-${{ matrix.platform }}
          path: src-tauri/target/release/bundle/

  bump-and-release:
    needs: build
    runs-on: ubuntu-22.04
    if: success()
    env:
      VERSION: ${{ needs.calculate-version.outputs.next_version }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASS: ${{ secrets.DB_PASS }}
      DB_NAME: ${{ secrets.DB_NAME }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
      TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Safety check for VERSION
        run: |
          if [ -z "$VERSION" ]; then
            echo "‚ùå VERSION is empty! Exiting."
            exit 1
          fi

      - name: Update version in package.json and tauri.conf.json
        run: |
          jq ".version = \"$VERSION\"" package.json > tmp.json && mv tmp.json package.json
          jq ".version = \"$VERSION\"" src-tauri/tauri.conf.json > tmp.json && mv tmp.json src-tauri/tauri.conf.json

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add package.json src-tauri/tauri.conf.json
          git commit -m "chore: bump version to $VERSION [skip ci]" || echo "No changes"

          # Remove conflicting tag if it exists
          git tag -d v$VERSION || true
          git push origin :refs/tags/v$VERSION || true

          git tag v$VERSION
          git push origin main --tags

      - name: Generate Conventional Changelog
        id: changelog
        run: |
          CURR_TAG=v$VERSION
          PREV_TAG=$(git describe --tags --abbrev=0 --exclude="$CURR_TAG" 2>/dev/null || echo "")
          DATE=$(date -u +"%Y-%m-%d")
          if [ -z "$PREV_TAG" ]; then RANGE=""; else RANGE="$PREV_TAG..HEAD"; fi

          {
            echo "## $CURR_TAG - $DATE"
            echo ""
            echo "### ‚ú® Features"
            git log $RANGE --grep="^feat:" --pretty=format:"- %s" | sed 's/^feat: //g' || true
            echo ""
            echo "### üêû Fixes"
            git log $RANGE --grep="^fix:" --pretty=format:"- %s" | sed 's/^fix: //g' || true
            echo ""
            echo "### üí• Breaking Changes"
            git log $RANGE --grep="BREAKING CHANGE" --pretty=format:"- %s" || true
            echo ""
            echo "### üì¶ Others"
            git log $RANGE \
              --invert-grep --grep="^feat:" --grep="^fix:" --grep="BREAKING CHANGE" \
              --pretty=format:"- %s" || true
          } > new_changelog.md

          if [ -f CHANGELOG.md ]; then
            sed -i "/^## $CURR_TAG - /,/^## v[0-9]\+\.[0-9]\+\.[0-9]\+/d" CHANGELOG.md || true
            cat new_changelog.md CHANGELOG.md > tmp && mv tmp CHANGELOG.md
          else
            cp new_changelog.md CHANGELOG.md
          fi

          # Correct GITHUB_OUTPUT syntax
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat new_changelog.md >> $GITHUB_OUTPUT
          echo EOF >> $GITHUB_OUTPUT

      - name: Commit changelog
        run: |
          git add CHANGELOG.md
          git commit -m "docs: update changelog for v$VERSION [skip ci]" || echo "No changes"
          git push origin main

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v$VERSION
          name: "Release v$VERSION"
          body: ${{ steps.changelog.outputs.changelog }}
          files: |
            src-tauri/target/release/bundle/**/*
