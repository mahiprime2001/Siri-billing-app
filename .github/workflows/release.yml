name: üöÄ Tauri Windows Auto Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  actions: read

jobs:
  release:
    runs-on: windows-latest
    steps:
      - name: üõí Checkout repository
        uses: actions/checkout@v4

      - name: ‚öôÔ∏è Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: ü¶Ä Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: ü™ü Install Tauri dependencies
        run: |
          npm install -g yarn
          yarn install

      # ---------------------------------------------------------
      # 1Ô∏è‚É£ Detect & manage version and tags
      # ---------------------------------------------------------
      - name: üß© Auto-increment version tag
        id: version
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          $tags = git tag --list | Sort-Object { [version]($_ -replace '^v', '') } -Descending
          if ($tags.Length -eq 0) {
            $newTag = "v0.1.0"
          } else {
            $latestTag = $tags[0]
            Write-Host "Current tag: $latestTag"
            $version = [version]($latestTag -replace '^v', '')
            $newVersion = [version]::new($version.Major, $version.Minor, $version.Build + 1)
            $newTag = "v$($newVersion.ToString())"
          }

          Write-Host "New tag: $newTag"
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

          git tag -d $newTag 2>$null
          git push origin :refs/tags/$newTag 2>$null

          git tag $newTag
          git push origin $newTag

          echo "VERSION=$newTag" >> $env:GITHUB_ENV

      # ---------------------------------------------------------
      # 2Ô∏è‚É£ Build the Tauri App
      # ---------------------------------------------------------
      - name: üèóÔ∏è Build Tauri for Windows
        run: yarn tauri build

      # ---------------------------------------------------------
      # 3Ô∏è‚É£ Create or update GitHub Release dynamically
      # ---------------------------------------------------------
      - name: üì¶ Upload Release Assets
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: pwsh
        run: |
          $version = "${{ env.VERSION }}"
          if (-not $version) { throw "VERSION is empty. Auto-tag failed." }

          gh release delete $version -y 2>$null
          gh release create $version --title "Siri Billing App $version" --notes "Automated release for $version"

          $artifacts = Get-ChildItem "src-tauri/target/release/bundle/windows" -Recurse -Include *.exe, *.msi, *.zip, *.sig
          foreach ($file in $artifacts) {
            Write-Host "Uploading: $($file.FullName)"
            gh release upload $version $file.FullName --clobber
          }

      # ---------------------------------------------------------
      # 4Ô∏è‚É£ Generate latest.json for Auto Updater
      # ---------------------------------------------------------
      - name: ü™∂ Generate latest.json
        shell: pwsh
        run: |
          $version = "${{ env.VERSION }}"
          $json = @{
            version = $version
            pub_date = (Get-Date).ToString("yyyy-MM-ddTHH:mm:ssZ")
            platforms = @{
              "windows-x86_64" = @{
                signature = ""
                url = "https://github.com/${{ github.repository }}/releases/download/$version/Siri-billing-app_$version_x64-setup.exe"
              }
            }
          } | ConvertTo-Json -Depth 5
          $json | Out-File -FilePath latest.json -Encoding utf8
          gh release upload $version latest.json --clobber

      # ---------------------------------------------------------
      # 5Ô∏è‚É£ Update version inside tauri.conf.json
      # ---------------------------------------------------------
      - name: üßæ Update Tauri version
        shell: pwsh
        run: |
          $config = Get-Content "src-tauri/tauri.conf.json" -Raw | ConvertFrom-Json
          $config.package.version = "${{ env.VERSION }}" -replace '^v', ''
          $config | ConvertTo-Json -Depth 10 | Out-File "src-tauri/tauri.conf.json" -Encoding utf8

          git add src-tauri/tauri.conf.json
          git commit -m "üîÑ Update Tauri version to ${{ env.VERSION }}"
          git push origin main
