name: Build and Release

on:
  push:
    branches:
      - main  # Adjust to your default branch (e.g., master, develop)
    tags:
      - 'v*'  # For official releases

permissions:
  contents: write  # For creating releases and uploading assets

env:
  NODE_VERSION: '20'  # Shared Node version
  BEFORE_BUILD_COMMAND: "npm run build"  # Matches your tauri.conf.json
  DIST_DIR: "out"  # Relative to repo root; matches frontendDist "../out" from src-tauri perspective

jobs:
  build-artifacts:
    runs-on: ubuntu-latest
    outputs:
      dist-hash: ${{ steps.dist-hash.outputs.hash }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install frontend dependencies
        run: pnpm install --frozen-lockfile

      - name: Build frontend
        run: ${{ env.BEFORE_BUILD_COMMAND }}
        working-directory: ./  # Ensure build runs in root where package.json is

      - name: Hash dist folder for integrity check
        id: dist-hash
        run: |
          find ${{ env.DIST_DIR }} -type f -exec md5sum {} + | sort | md5sum | awk '{print $1}' > hash.txt
          echo "hash=$(cat hash.txt)" >> $GITHUB_OUTPUT

      - name: Upload frontend dist as artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: ${{ env.DIST_DIR }}/**
          retention-days: 1

  build-and-bundle:
    needs: build-artifacts
    strategy:
      matrix:
        platform: [macos-latest, ubuntu-latest, windows-latest]
        include:
          - platform: macos-latest
            target: x86_64-apple-darwin,aarch64-apple-darwin
          - platform: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - platform: windows-latest
            target: x86_64-pc-windows-msvc
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install Linux dependencies (Ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc g++ pkg-config libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf libayatana-appindicator3-dev

      - name: Download frontend dist
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: ${{ env.DIST_DIR }}

      - name: Verify dist integrity
        run: |
          DOWNLOAD_HASH=$(find ${{ env.DIST_DIR }} -type f -exec md5sum {} + | sort | md5sum | awk '{print $1}')
          if [ "$DOWNLOAD_HASH" != "${{ needs.build-artifacts.outputs.dist-hash }}" ]; then
            echo "Dist hash mismatch! Expected: ${{ needs.build-artifacts.outputs.dist-hash }}, Got: $DOWNLOAD_HASH"
            exit 1
          fi
        shell: bash  # Ensure bash for Windows compatibility

      - name: Build and bundle Tauri app
        id: tauri_build
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
        with:
          projectPath: src-tauri  # Specifies the Tauri project directory
          tagName: ${{ github.ref_type == 'tag' && github.ref_name || '' }}
          releaseName: ${{ github.ref_type == 'tag' && 'Siri Billing App ${{ github.ref_name }}' || 'Snapshot Build ${{ github.sha }}' }}
          draft: ${{ github.ref_type == 'tag' }}
          prerelease: false
          args: --target ${{ matrix.target }} --config '{"bundle":{"externalBin":["binaries/Siribilling-backend"],"createUpdaterArtifacts":${{ github.ref_type == 'tag' }},"active":${{ github.ref_type == 'tag' }}},"plugins":{"updater":{"active":${{ github.ref_type == 'tag' }}}},"build":{"frontendDist":"../${{ env.DIST_DIR }}"}}'

      - name: Upload bundles as artifact
        uses: actions/upload-artifact@v4
        with:
          name: bundles-${{ matrix.platform }}-${{ github.sha }}
          path: target/*/release/bundle/**
          retention-days: 7

  create-or-update-release:
    if: github.ref_type == 'tag'
    needs: build-and-bundle
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all bundle artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Install minisign
        run: |
          curl -L https://github.com/jedisct1/minisign/releases/latest/download/minisign-linux-amd64 -o minisign
          chmod +x minisign
          sudo mv minisign /usr/local/bin/

      - name: Sign updater artifacts
        env:
          MINISIGN_PRIVATE_KEY: ${{ secrets.MINISIGN_PRIVATE_KEY }}
          MINISIGN_PASSWORD: ${{ secrets.MINISIGN_PASSWORD }}
        run: |
          echo "$MINISIGN_PRIVATE_KEY" > minisign.key
          find artifacts -name '*.bin' -o -name 'latest.json' | while read file; do
            if [ -f "$file" ]; then
              minisign -S -s minisign.key -m "$file" -x "$file.sig" -t "Artifact for ${{ github.ref_name }}" -p "$MINISIGN_PASSWORD"
            fi
          done

      - name: Prepare release assets
        run: |
          mkdir release-assets
          find artifacts -type f -exec cp --parents {} release-assets/ \;

      - name: Create/Update GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          draft: false
          prerelease: false
          files: release-assets/**
          body: |
            ## Version ${{ github.ref_name }}
            Auto-generated release from tag.
            Includes bundled backend and updater support.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify-success:
    if: always()
    needs: [build-and-bundle, create-or-update-release]
    runs-on: ubuntu-latest
    steps:
      - name: Notify completion
        run: echo "Workflow complete for ${{ github.ref }}. Check artifacts or release."
