name: "Tauri Cross-Platform Auto Release"
on:
  push:
    branches:
      - main
  workflow_dispatch:
permissions:
  contents: write
  actions: read
  metadata: read
jobs:
  calculate-version:
    runs-on: ubuntu-22.04
    outputs:
      next_version: ${{ steps.calculate.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - run: sudo apt-get install -y jq
      - id: calculate
        run: |
          PREV_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          RANGE=${PREV_TAG:+$PREV_TAG..HEAD}
          if git log $RANGE --pretty=%B | grep -q "BREAKING CHANGE"; then TYPE="major"
          elif git log $RANGE --pretty=%B | grep -q "^feat:"; then TYPE="minor"
          elif git log $RANGE --pretty=%B | grep -q "^fix:"; then TYPE="patch"
          else TYPE="patch"; fi
          TAURI_FILE=src-tauri/tauri.conf.json
          OLD_VERSION=$(jq -r '.version' $TAURI_FILE)
          if [ -z "$OLD_VERSION" ] || [ "$OLD_VERSION" = "null" ]; then
            echo "‚ùå Could not find version in $TAURI_FILE"
            exit 1
          fi
          IFS='.' read -r MAJOR MINOR PATCH <<< "$OLD_VERSION"
          case "$TYPE" in
            major) MAJOR=$((MAJOR+1)); MINOR=0; PATCH=0 ;;
            minor) MINOR=$((MINOR+1)); PATCH=0 ;;
            patch) PATCH=$((PATCH+1)) ;;
          esac
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "Calculated next version: $OLD_VERSION -> $NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
  build:
    needs: calculate-version
    outputs:
      version: ${{ needs.calculate-version.outputs.next_version }}
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-22.04, windows-latest, macos-latest]
    runs-on: ${{ matrix.platform }}
    env:
      VERSION: ${{ needs.calculate-version.outputs.next_version }}
      TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
      TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install Linux dependencies
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev \
            librsvg2-dev patchelf libjavascriptcoregtk-4.1-dev libsoup-3.0-dev \
            pkg-config clang
      - uses: dtolnay/rust-toolchain@stable
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            node_modules
          key: ${{ runner.os }}-deps-${{ hashFiles('**/pnpm-lock.yaml','**/yarn.lock','**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-deps-
      - run: |
          corepack enable
          pnpm install --frozen-lockfile || npm install
      - run: pnpm build || npm run build
      - run: cargo install tauri-cli --locked
      - run: pnpm tauri build || npm run tauri build
      - uses: actions/upload-artifact@v4
        with:
          name: tauri-${{ matrix.platform }}
          path: src-tauri/target/release/bundle/
  bump-and-release:
    needs: build
    runs-on: ubuntu-22.04
    if: success()
    env:
      VERSION: ${{ needs.build.outputs.version }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
      TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Safety check for VERSION
        run: |
          if [ -z "$VERSION" ]; then
            echo "‚ùå VERSION is empty! Exiting."
            exit 1
          fi
          echo "‚úÖ Using VERSION=$VERSION"
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Update version in package.json and tauri.conf.json
        run: |
          # Pull latest changes to avoid non-fast-forward error
          git pull origin main
          
          jq ".version = \"$VERSION\"" package.json > tmp.json && mv tmp.json package.json
          jq ".version = \"$VERSION\"" src-tauri/tauri.conf.json > tmp.json && mv tmp.json src-tauri/tauri.conf.json
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add package.json src-tauri/tauri.conf.json
          git commit -m "chore: bump version to $VERSION [skip ci]" || echo "No changes"
          git tag -d v$VERSION || true
          git push origin :refs/tags/v$VERSION || true
          git tag v$VERSION
          git push origin main --tags
      - name: Generate changelog
        id: changelog
        run: |
          CURR_TAG=v$VERSION
          PREV_TAG=$(git describe --tags --abbrev=0 --exclude="$CURR_TAG" 2>/dev/null || echo "")
          DATE=$(date -u +"%Y-%m-%d")
          RANGE=${PREV_TAG:+$PREV_TAG..HEAD}
          {
            echo "## $CURR_TAG - $DATE"
            echo "### ‚ú® Features"
            git log $RANGE --grep="^feat:" --pretty=format:"- %s" | sed 's/^feat: //g' || true
            echo ""
            echo "### üêû Fixes"
            git log $RANGE --grep="^fix:" --pretty=format:"- %s" | sed 's/^fix: //g' || true
            echo ""
            echo "### üí• Breaking Changes"
            git log $RANGE --grep="BREAKING CHANGE" --pretty=format:"- %s" || true
            echo ""
            echo "### üì¶ Others"
            git log $RANGE \
              --invert-grep --grep="^feat:" --grep="^fix:" --grep="BREAKING CHANGE" \
              --pretty=format:"- %s" || true
          } > new_changelog.md
          if [ -f CHANGELOG.md ]; then
            sed -i "/^## $CURR_TAG - /,/^## v[0-9]\+\.[0-9]\+\.[0-9]\+/d" CHANGELOG.md || true
            cat new_changelog.md CHANGELOG.md > tmp && mv tmp CHANGELOG.md
          else
            cp new_changelog.md CHANGELOG.md
          fi
          # Use a random delimiter to avoid conflicts
          delimiter="ghadelimiter_$(openssl rand -hex 8)"
          echo "changelog<<${delimiter}" >> $GITHUB_OUTPUT
          cat new_changelog.md >> $GITHUB_OUTPUT
          echo "${delimiter}" >> $GITHUB_OUTPUT
      - name: Commit changelog
        run: |
          git add CHANGELOG.md
          git commit -m "docs: update changelog for v$VERSION [skip ci]" || echo "No changes"
          git push origin main
      - name: Generate latest.json
        run: |
          RELEASE_URL="https://github.com/${GITHUB_REPOSITORY}/releases/download/v$VERSION"
          DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "$TAURI_PRIVATE_KEY" > private.key
          echo "{" > latest.json
          echo "  \"version\": \"$VERSION\"," >> latest.json
          echo "  \"notes\": \"${{ steps.changelog.outputs.changelog }}\"," >> latest.json
          echo "  \"pub_date\": \"$DATE\"," >> latest.json
          echo "  \"platforms\": {" >> latest.json
          sep=""
          for file in $(find artifacts -type f); do
            fname=$(basename "$file")
            tauri signer sign \
              --private-key private.key \
              ${TAURI_KEY_PASSWORD:+--password $TAURI_KEY_PASSWORD} \
              --input "$file" > sig.txt
            signature=$(cat sig.txt)
            case "$fname" in
              *.dmg) platform="darwin-universal" ;;
              *.msi|*.nsis.exe) platform="windows-x86_64" ;;
              *.AppImage|*.deb) platform="linux-x86_64" ;;
              *) continue ;;
            esac
            url="$RELEASE_URL/$fname"
            echo "$sep    \"$platform\": {" >> latest.json
            echo "      \"signature\": \"$signature\"," >> latest.json
            echo "      \"url\": \"$url\"" >> latest.json
            echo -n "    }" >> latest.json
            sep=",\n"
          done
          echo "" >> latest.json
          echo "  }" >> latest.json
          echo "}" >> latest.json
      - name: Commit latest.json
        run: |
          git add latest.json
          git commit -m "chore: add latest.json for v$VERSION [skip ci]" || echo "No changes"
          git push origin main
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v$VERSION
          name: "Release v$VERSION"
          body: ${{ steps.changelog.outputs.changelog }}
          files: |
            artifacts/**/*
