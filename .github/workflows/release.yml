name: "Tauri Windows Release (Private Key Signing)"

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-release-windows:
    runs-on: windows-latest

    steps:
      - name: üõí Checkout code
        uses: actions/checkout@v4

      - name: ü™ü Install Windows dependencies
        run: choco install -y wixtoolset nsis

      - name: ü¶Ä Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: üß© Setup pnpm & Node.js
        uses: pnpm/action-setup@v4
        with:
          version: 8
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm

      - name: üì¶ Install frontend dependencies
        run: pnpm install --no-frozen-lockfile

      # Decode and export the private key
      - name: üîê Decode TAURI_SIGNING_PRIVATE_KEY
        shell: pwsh
        run: |
          Write-Host "üîê Decoding private key..."
          $decoded = [System.Convert]::FromBase64String($env:TAURI_SIGNING_PRIVATE_KEY)
          New-Item -ItemType Directory -Force -Path "src-tauri" | Out-Null
          $pemPath = "src-tauri/signing_private.pem"
          [System.IO.File]::WriteAllBytes($pemPath, $decoded)
          Write-Host "‚úÖ Private key written to $pemPath"

          # Also expose the decoded PEM contents for Tauri env
          $keyContent = Get-Content $pemPath -Raw
          echo "TAURI_SIGNING_PRIVATE_KEY<<EOF" >> $env:GITHUB_ENV
          echo "$keyContent" >> $env:GITHUB_ENV
          echo "EOF" >> $env:GITHUB_ENV
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}

      - name: üöÄ Build and Release Windows with Tauri
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ env.TAURI_SIGNING_PRIVATE_KEY }}
        with:
          tagName: "v__VERSION__"
          releaseName: "Windows Release v__VERSION__"
          releaseBody: "Windows installer and signature"
          releaseDraft: false
          prerelease: false
          includeUpdaterJson: false

  post-release-windows:
    needs: build-and-release-windows
    runs-on: ubuntu-latest

    steps:
      - name: üõí Checkout repository
        uses: actions/checkout@v4

      - name: üî¢ Get tag version
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: üßæ Create latest.json
        run: |
          VERSION=${{ steps.get_version.outputs.version }}
          DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          URL="https://github.com/${{ github.repository }}/releases/download/v${VERSION}/Siri Billing App_${VERSION}_x64-setup.exe"
          SIG_URL="https://github.com/${{ github.repository }}/releases/download/v${VERSION}/Siri Billing App_${VERSION}_x64-setup.exe.sig"
          cat <<EOF > latest.json
          {
            "version": "${VERSION}",
            "date": "${DATE}",
            "notes": "Windows release ${VERSION}",
            "platform": {
              "windows": {
                "url": "${URL}",
                "signature": "${SIG_URL}"
              }
            }
          }
          EOF

      - name: üì§ Upload latest.json to Release
        uses: softprops/action-upload-release-asset@v1
        with:
          tag: v${{ steps.get_version.outputs.version }}
          asset_path: latest.json
          asset_name: latest.json
          asset_content_type: application/json
