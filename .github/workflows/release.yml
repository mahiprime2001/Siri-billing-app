name: "üöÄ Tauri Windows Auto Release (MSVC Backend Fixed)"

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  actions: read

jobs:
  build-and-release-windows:
    runs-on: windows-latest

    steps:
      # 1Ô∏è‚É£ Checkout repository with full history + tags
      - name: üõí Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      # Ensure all tags exist locally
      - name: üîÑ Ensure tags present
        shell: pwsh
        run: |
          git fetch --tags --force

      # 2Ô∏è‚É£ Setup Node.js & Rust
      - name: ‚öôÔ∏è Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: ü¶Ä Setup Rust
        uses: dtolnay/rust-toolchain@stable

      # 3Ô∏è‚É£ Install project dependencies
      - name: üì¶ Install dependencies
        run: yarn install --frozen-lockfile

      # 4Ô∏è‚É£ Write raw private key as PEM
      - name: üóùÔ∏è Write private key to PEM file
        shell: pwsh
        run: |
          $Key = "${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}" -replace '\\n', "`n"
          $KeyPath = "src-tauri/signing_private.pem"
          Set-Content -Path $KeyPath -Value $Key -Encoding UTF8
          echo "TAURI_SIGNING_PRIVATE_KEY=$(Get-Content $KeyPath -Raw)" >> $env:GITHUB_ENV

      # 5Ô∏è‚É£ Auto-increment version tag (SemVer-only, ignore "latest")
      - name: üîñ Auto increment version tag
        id: version
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"

          # Ensure remote tags are visible
          git fetch --tags --force

          # Use Git's native semver sort and filter to SemVer triplets only
          # Patterns are shell wildcards (fnmatch), so '.' matches a literal dot
          $latestTag = (git tag --list "v[0-9]*.[0-9]*.[0-9]*" --sort=-v:refname | Select-Object -First 1)

          if ([string]::IsNullOrWhiteSpace($latestTag)) {
            $newTag = "v0.1.0"
          } else {
            Write-Host "Current tag: $latestTag"
            $clean = ($latestTag -replace '^v','')
            $version = [version]$clean
            $newVersion = [version]::new($version.Major, $version.Minor, $version.Build + 1)
            $newTag = "v$($newVersion.ToString())"
          }

          Write-Host "New tag: $newTag"
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

          # Recreate tag safely
          git tag -d $newTag 2>$null
          git push origin :refs/tags/$newTag 2>$null
          git tag $newTag
          git push origin $newTag

          echo "VERSION=$newTag" >> $env:GITHUB_ENV

      # 6Ô∏è‚É£ Build Tauri App (Windows MSVC backend)
      - name: üöÄ Build Windows release with Tauri
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ env.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
          TAURI_ENV_TARGET_TRIPLE: x86_64-pc-windows-msvc
        run: |
          $configPath = "src-tauri/tauri.conf.json"
          $config = Get-Content $configPath -Raw | ConvertFrom-Json -AsHashtable

          # Ensure correct externalBin for MSVC backend
          $config['bundle']['externalBin'] = @("binaries/Siribilling-backend")

          $config | ConvertTo-Json -Depth 10 | Out-File $configPath -Encoding UTF8

          yarn tauri build

      # 7Ô∏è‚É£ Generate latest.json for updater (points to versioned asset)
      - name: üßæ Generate latest.json
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"

          $version = "${{ env.VERSION }}"
          $pubDate = Get-Date -Format "yyyy-MM-ddTHH:mm:ssZ"
          $repo = $env:GITHUB_REPOSITORY

          $nsisDir = "src-tauri/target/release/bundle/nsis"
          if (-not (Test-Path $nsisDir)) {
            throw "NSIS bundle directory not found: $nsisDir"
          }

          $exe = Get-ChildItem -Path $nsisDir -Filter *.exe -File | Sort-Object LastWriteTime -Descending | Select-Object -First 1
          if (-not $exe) { throw "No NSIS .exe found in $nsisDir" }

          $sig = Get-ChildItem -Path $nsisDir -Filter *.sig -File | Sort-Object LastWriteTime -Descending | Select-Object -First 1
          if (-not $sig) { throw "No .sig found in $nsisDir" }
          $sigContent = Get-Content -Path $sig.FullName -Raw

          $assetNameEncoded = [System.Uri]::EscapeDataString($exe.Name)
          $assetUrl = "https://github.com/$repo/releases/download/$version/$assetNameEncoded"

          $latestJson = @{
            version   = $version
            notes     = "Windows release $version"
            pub_date  = $pubDate
            platforms = @{
              "windows-x86_64" = @{
                url       = $assetUrl
                signature = $sigContent
              }
            }
          } | ConvertTo-Json -Depth 6

          $latestJson | Out-File -FilePath latest.json -Encoding UTF8

      # 8Ô∏è‚É£ Create release and upload all artifacts (fail fast on gh errors)
      - name: üì§ Create release and upload assets
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $ErrorActionPreference = "Stop"

          gh auth status
          if ($LASTEXITCODE -ne 0) { throw "GitHub CLI auth failed" }

          $version = "${{ env.VERSION }}"

          # Ensure release exists
          gh release view $version -R $env:GITHUB_REPOSITORY *> $null
          if ($LASTEXITCODE -ne 0) {
            gh release create $version --title "Windows Release $version" --notes "Automated release" --verify-tag -R $env:GITHUB_REPOSITORY
            if ($LASTEXITCODE -ne 0) { throw "Failed to create release $version" }
          }

          $folders = @(
            "src-tauri/target/release/bundle/msi",
            "src-tauri/target/release/bundle/nsis"
          )

          foreach ($folder in $folders) {
            if (Test-Path $folder) {
              Get-ChildItem -Path $folder -File | ForEach-Object {
                Write-Host "Uploading $($_.FullName)..."
                gh release upload $version $_.FullName --clobber -R $env:GITHUB_REPOSITORY
                if ($LASTEXITCODE -ne 0) { throw "Failed to upload $($_.Name) to $version" }
              }
            }
          }

          # Upload latest.json to the versioned release
          gh release upload $version latest.json --clobber -R $env:GITHUB_REPOSITORY
          if ($LASTEXITCODE -ne 0) { throw "Failed to upload latest.json to $version" }

          # Update 'latest' tag/release and attach latest.json
          git tag -f latest
          git push origin :refs/tags/latest
          git push origin latest

          gh release view latest -R $env:GITHUB_REPOSITORY *> $null
          if ($LASTEXITCODE -ne 0) {
            gh release create latest --title "Latest Windows Release" --notes "Auto-synced with $version" -R $env:GITHUB_REPOSITORY
            if ($LASTEXITCODE -ne 0) { throw "Failed to create 'latest' release" }
          }

          gh release upload latest latest.json --clobber -R $env:GITHUB_REPOSITORY
          if ($LASTEXITCODE -ne 0) { throw "Failed to upload latest.json to 'latest' release" }

      # 9Ô∏è‚É£ Update Tauri version in tauri.conf.json (Tauri v2)
      - name: üîÑ Update tauri.conf.json version
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          $configPath = "src-tauri/tauri.conf.json"
          $config = Get-Content $configPath -Raw | ConvertFrom-Json -AsHashtable
          $ver = ("${{ env.VERSION }}" -replace '^v','')
          $config['version'] = $ver
          $config | ConvertTo-Json -Depth 10 | Out-File $configPath -Encoding UTF8
          git add $configPath
          git commit -m "üîÑ Update Tauri version to ${{ env.VERSION }}" || echo "No changes to commit"
          git push origin main || echo "No changes to push"
