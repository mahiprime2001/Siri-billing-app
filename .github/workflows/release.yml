name: "Tauri Windows Release (Dynamic, Auto Version, PEM Fix)"

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  actions: read

jobs:
  release:
    runs-on: windows-latest
    steps:
      # 1Ô∏è‚É£ Checkout
      - name: üõí Checkout repository
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Setup Node.js & Rust
      - name: ‚öôÔ∏è Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: ü¶Ä Setup Rust
        uses: dtolnay/rust-toolchain@stable

      # 3Ô∏è‚É£ Install dependencies
      - name: ü™ü Install dependencies
        run: |
          npm install -g yarn
          yarn install

      # 4Ô∏è‚É£ Write raw private key as PEM (Fixed Multiline Handling)
      - name: üóùÔ∏è Write private key to PEM file
        shell: pwsh
        run: |
          # Convert literal \n to actual newlines for proper PEM formatting
          $Key = "${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}" -replace '\\n', "`n"
          $KeyPath = "src-tauri/signing_private.pem"
          Set-Content -Path $KeyPath -Value $Key -Encoding UTF8
          echo "TAURI_SIGNING_PRIVATE_KEY=$(Get-Content $KeyPath -Raw)" >> $env:GITHUB_ENV

      # 5Ô∏è‚É£ Auto-increment tag/version
      - name: üîñ Auto increment version tag
        id: version
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          $tags = git tag --list | Sort-Object { [version]($_ -replace '^v', '') } -Descending
          if ($tags.Length -eq 0) {
            $newTag = "v0.1.0"
          } else {
            $latestTag = $tags[0]
            Write-Host "Current tag: $latestTag"
            $version = [version]($latestTag -replace '^v', '')
            $newVersion = [version]::new($version.Major, $version.Minor, $version.Build + 1)
            $newTag = "v$($newVersion.ToString())"
          }

          Write-Host "New tag: $newTag"
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

          git tag -d $newTag 2>$null
          git push origin :refs/tags/$newTag 2>$null

          git tag $newTag
          git push origin $newTag

          echo "VERSION=$newTag" >> $env:GITHUB_ENV

      # 6Ô∏è‚É£ Build Tauri app
      - name: üöÄ Build Windows release with Tauri
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ env.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          tagName: "${{ env.VERSION }}"
          releaseName: "Windows Release ${!!env.VERSION}"
          releaseBody: "Windows installer and signature"
          releaseDraft: false
          prerelease: false
          includeUpdaterJson: false

      # 7Ô∏è‚É£ Create latest.json for updater (signature is file CONTENT, not URL)
      - name: üßæ Generate latest.json
        shell: pwsh
        run: |
          $version = "${{ env.VERSION }}"
          $pubDate = Get-Date -Format "yyyy-MM-ddTHH:mm:ssZ"
          $repo = $env:GITHUB_REPOSITORY

          # Locate NSIS artifacts
          $nsisDir = "src-tauri/target/release/bundle/nsis"
          if (-not (Test-Path $nsisDir)) {
            throw "NSIS bundle directory not found: $nsisDir"
          }

          $exe = Get-ChildItem -Path $nsisDir -Filter *.exe -File | Sort-Object LastWriteTime -Descending | Select-Object -First 1
          if (-not $exe) { throw "No NSIS .exe found in $nsisDir" }

          $sigPath = "$($exe.FullName).sig"
          if (-not (Test-Path $sigPath)) {
            # Fallback: grab the newest .sig if the name pattern differs
            $sigPath = (Get-ChildItem -Path $nsisDir -Filter *.sig -File | Sort-Object LastWriteTime -Descending | Select-Object -First 1).FullName
          }
          if (-not (Test-Path $sigPath)) { throw "No .sig found in $nsisDir" }

          $sigContent = Get-Content -Path $sigPath -Raw

          # URL-encode the asset filename for release download URL
          $assetNameEncoded = [System.Uri]::EscapeDataString($exe.Name)
          $assetUrl = "https://github.com/$repo/releases/download/$version/$assetNameEncoded"

          # Tauri static latest.json format with signature CONTENT
          $latestJson = @{
            version   = $version
            notes     = "Windows release $version"
            pub_date  = $pubDate
            platforms = @{
              "windows-x86_64" = @{
                url       = $assetUrl
                signature = $sigContent
              }
            }
          } | ConvertTo-Json -Depth 6

          $latestJson | Out-File -FilePath latest.json -Encoding UTF8

      # 8Ô∏è‚É£ Upload all artifacts dynamically
      - name: üì§ Upload release assets
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh auth setup-git

          $version = "${{ env.VERSION }}"

          # Ensure release exists
          try {
            gh release view $version -R $env:GITHUB_REPOSITORY | Out-Null
          } catch {
            Write-Host "Release $version does not exist, creating..."
            gh release create $version --title "Windows Release $version" --notes "Automated release from workflow" -R $env:GITHUB_REPOSITORY
          }

          # Upload MSI and NSIS artifacts if present
          $folders = @(
              "src-tauri/target/release/bundle/msi",
              "src-tauri/target/release/bundle/nsis"
          )
          foreach ($folder in $folders) {
              if (Test-Path $folder) {
                  Get-ChildItem -Path $folder -File | ForEach-Object {
                      Write-Host "Uploading $($_.FullName)..."
                      gh release upload $version $_.FullName --clobber -R $env:GITHUB_REPOSITORY
                  }
              }
          }

          # Upload latest.json
          gh release upload $version latest.json --clobber -R $env:GITHUB_REPOSITORY

      # 9Ô∏è‚É£ Update tauri.conf.json version (ensure nested path exists)
      - name: üîÑ Update tauri.conf.json version
        shell: pwsh
        run: |
          $configPath = "src-tauri/tauri.conf.json"
          $config = Get-Content $configPath -Raw | ConvertFrom-Json

          # Ensure 'package' exists as an object
          if (-not $config.PSObject.Properties['package']) {
            Add-Member -InputObject $config -MemberType NoteProperty -Name package -Value ([PSCustomObject]@{})
          }

          # Set version without leading 'v'
          $config.package.version = ("${{ env.VERSION }}" -replace '^v','')

          # Write back
          $config | ConvertTo-Json -Depth 10 | Out-File $configPath -Encoding UTF8

          git add $configPath
          git commit -m "üîÑ Update Tauri version to ${{ env.VERSION }}" || echo "No changes to commit"
          git push origin main || echo "No changes to push"
