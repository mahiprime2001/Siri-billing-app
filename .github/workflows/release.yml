name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write  # For creating releases and uploading assets

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create_release.outputs.release_id }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'  # Adjust if your project uses a different version
          cache: 'pnpm'  # Matches your pnpm dev command

      - name: Install frontend dependencies
        run: pnpm install

      - name: Build frontend
        run: npm run build  # Matches your tauri.conf.json beforeBuildCommand

      - name: Create GitHub Release
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: ${{ github.ref_name }}
          releaseName: "Siri Billing App ${{ github.ref_name }}"
          draft: true  # Start as draft, publish later
          prerelease: false
          args: --config '{"build":{"beforeBuildCommand":"npm run build"},"bundle":{"createUpdaterArtifacts":true}}'

  build-and-sign:
    needs: create-release
    strategy:
      matrix:
        platform: [macos-latest, ubuntu-latest, windows-latest]
        include:
          - platform: macos-latest
            target: x86_64-apple-darwin,aarch64-apple-darwin  # Build for both Intel and Apple Silicon
          - platform: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - platform: windows-latest
            target: x86_64-pc-windows-msvc
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install Ubuntu dependencies (for Linux builds)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc g++ pkg-config libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf libayatana-appindicator3-dev

      - name: Install macOS dependencies (if needed)
        if: matrix.platform == 'macos-latest'
        run: brew install pkg-config  # Add if your external bin needs it

      - name: Install Windows dependencies (if needed)
        if: matrix.platform == 'windows-latest'
        run: choco install pkgconfiglite  # Rare, but for any native deps

      - name: Install frontend dependencies
        run: pnpm install

      - name: Build frontend
        run: npm run build

      # Build your external binary if it's not pre-committed (example for a Go binary; adjust or remove if not needed)
      # - name: Build external backend binary (e.g., Go)
      #   if: true  # Customize condition
      #   run: |
      #     go build -o binaries/Siribilling-backend-${{ matrix.platform }} ./path/to/backend
      #   env:
      #     GOOS: ${{ matrix.platform == 'windows-latest' && 'windows' || matrix.platform == 'ubuntu-latest' && 'linux' || 'darwin' }}
      #     GOARCH: amd64  # Or arm64 for aarch64

      - name: Build and bundle Tauri app
        id: tauri_build
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # For code signing (optional but recommended for prod)
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}  # Base64-encoded cert for macOS
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          CSC_LINK: ${{ secrets.CSC_LINK }}  # Windows cert
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
        with:
          tagName: ${{ github.ref_name }}
          releaseName: "Siri Billing App ${{ github.ref_name }}"
          draft: true
          prerelease: false
          args: --target ${{ matrix.target }} --config '{"bundle":{"externalBin":["binaries/Siribilling-backend"],"createUpdaterArtifacts":true},"plugins":{"updater":{"active":true}}}'
          updaterArgs: '--sign-with-minisign'  # Auto-signs if key provided, but we'll handle manually

      - name: Install minisign (for Unix-like platforms)
        if: matrix.platform != 'windows-latest'
        run: |
          curl -L https://github.com/jedisct1/minisign/releases/download/0.11/minisign-linux-amd64 -o minisign
          chmod +x minisign

      - name: Sign updater artifacts with minisign
        if: matrix.platform != 'windows-latest'
        env:
          MINISIGN_PRIVATE_KEY: ${{ secrets.MINISIGN_PRIVATE_KEY }}
          MINISIGN_PASSWORD: ${{ secrets.MINISIGN_PASSWORD }}
        run: |
          echo "$MINISIGN_PRIVATE_KEY" > minisign.key
          for file in src-tauri/target/*/release/bundle/*/update/*.bin; do
            ./minisign -S -s minisign.key -m "$file" -x "$file.sig" -t "Updater artifact for ${{ github.ref_name }} on ${{ matrix.platform }}" -p "$MINISIGN_PASSWORD"
          done
          # Also sign latest.json if generated per-platform (Tauri generates one globally, but ensure)
          if [ -f src-tauri/target/*/release/bundle/latest.json ]; then
            ./minisign -S -s minisign.key -m src-tauri/target/*/release/bundle/latest.json -x src-tauri/target/*/release/bundle/latest.json.sig -t "Latest manifest" -p "$MINISIGN_PASSWORD"
          fi

      - name: Sign on Windows (using minisign via WSL or alternative; skip if handling elsewhere)
        if: matrix.platform == 'windows-latest'
        shell: bash
        env:
          MINISIGN_PRIVATE_KEY: ${{ secrets.MINISIGN_PRIVATE_KEY }}
          MINISIGN_PASSWORD: ${{ secrets.MINISIGN_PASSWORD }}
        run: |
          # Install minisign on Windows via scoop or manual; this is tricky, recommend using a tool like signtool if alternative
          echo "Minisign on Windows requires additional setup; consider cross-signing or using a Unix step."
          # Placeholder: Add actual Windows minisign installation if needed

      - name: Upload built bundles and updater artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-assets-${{ matrix.platform }}
          path: |
            src-tauri/target/*/release/bundle/**
            !**/*.sig  # Upload sigs separately if needed
          retention-days: 5

      - name: Upload signatures
        uses: actions/upload-artifact@v4
        with:
          name: signatures-${{ matrix.platform }}
          path: src-tauri/target/*/release/bundle/**/*.sig
          retention-days: 5

  publish-release:
    needs: [create-release, build-and-sign]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare assets for upload
        run: |
          mkdir -p release-assets
          cp -r artifacts/*/ release-assets/
          # Flatten and organize: e.g., latest.json should be at root for your endpoint

      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          draft: false
          prerelease: false
          files: |
            release-assets/**
          body: |
            ## Changes
            - Update to version ${{ github.ref_name }}
            - Bundled with latest backend.
            See tauri.conf.json for config details.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
