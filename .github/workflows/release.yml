name: "🚀 Tauri Windows Auto Release (Use Tauri Config Version)"

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  actions: read

jobs:
  build-and-release-windows:
    runs-on: windows-latest

    steps:
      # 1️⃣ Checkout repository
      - name: 🛒 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      # 2️⃣ Setup Node.js & Rust
      - name: ⚙️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: 🦀 Setup Rust
        uses: dtolnay/rust-toolchain@stable

      # 3️⃣ Install project dependencies
      - name: 📦 Install dependencies
        run: yarn install --frozen-lockfile

      # 4️⃣ Write raw private key as PEM
      - name: 🗝️ Write private key to PEM file
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          $Key = "${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}" -replace '\\n', "`n"
          $KeyPath = "src-tauri/signing_private.pem"
          Set-Content -Path $KeyPath -Value $Key -Encoding UTF8
          echo "TAURI_SIGNING_PRIVATE_KEY=$(Get-Content $KeyPath -Raw)" >> $env:GITHUB_ENV

      # 5️⃣ Read Tauri version from tauri.conf.json and ensure Windows-safe MSI mapping
      - name: 📄 Read Tauri version
        id: tauri_version
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          $configPath = "src-tauri/tauri.conf.json"
          if (-not (Test-Path $configPath)) { throw "Missing $configPath" }
          $cfg = Get-Content $configPath -Raw | ConvertFrom-Json -AsHashtable
          $appVersion = $cfg['version']
          if (-not $appVersion) { throw "Missing 'version' in tauri.conf.json" }

          # Export authoritative version for release and updater
          echo "APP_VERSION=$appVersion" >> $env:GITHUB_ENV

          # Compute MSI-safe ProductVersion (for WiX), per 255.255.65535
          try {
            $ver = [version]($appVersion -replace '^v','')
          } catch {
            throw "App version is not parseable as <major>.<minor>.<build>: $appVersion"
          }
          $maj = [Math]::Min($ver.Major,255)
          $min = [Math]::Min($ver.Minor,255)
          $bld = if ($ver.Build -ge 0) { [Math]::Min($ver.Build,65535) } else { 0 }
          $msiVersion = "$maj.$min.$bld"
          echo "MSI_VERSION=$msiVersion" >> $env:GITHUB_ENV
          Write-Host "APP_VERSION=$appVersion; MSI_VERSION=$msiVersion"

      # 6️⃣ Ensure tag v{APP_VERSION} exists (no deletions)
      - name: 🏷️ Ensure tag for version
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          $tag = "v${{ env.APP_VERSION }}"
          if (git rev-parse -q --verify "refs/tags/$tag" *> $null) {
            Write-Host "Tag $tag exists."
          } else {
            git config user.name "github-actions"
            git config user.email "github-actions@github.com"
            git tag $tag
            git push origin $tag
          }
          echo "RELEASE_TAG=$tag" >> $env:GITHUB_ENV

      # 7️⃣ Build Tauri App (Windows MSVC backend)
      - name: 🚀 Build Windows release with Tauri
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ env.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
          TAURI_ENV_TARGET_TRIPLE: x86_64-pc-windows-msvc
        run: |
          $ErrorActionPreference = "Stop"

          # Optionally ensure correct externalBin path on Windows
          $configPath = "src-tauri/tauri.conf.json"
          $cfg = Get-Content $configPath -Raw | ConvertFrom-Json -AsHashtable
          if (-not $cfg.ContainsKey('bundle')) { $cfg['bundle'] = @{} }
          $cfg['bundle']['externalBin'] = @("binaries/Siribilling-backend")

          # Keep app/version from tauri.conf.json as the source of truth for NSIS and metadata
          # For MSI, WiX uses numeric ProductVersion, but Tauri derives from config version;
          # if needed, a future per-target override can be applied here.

          $cfg | ConvertTo-Json -Depth 10 | Out-File $configPath -Encoding UTF8

          yarn tauri build

      # 8️⃣ Generate latest.json (use APP_VERSION for updater; assets under RELEASE_TAG)
      - name: 🧾 Generate latest.json
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"

          $appVersion = "${{ env.APP_VERSION }}"
          $tag = "${{ env.RELEASE_TAG }}"
          $pubDate = Get-Date -Format "yyyy-MM-ddTHH:mm:ssZ"
          $repo = $env:GITHUB_REPOSITORY

          $nsisDir = "src-tauri/target/release/bundle/nsis"
          if (-not (Test-Path $nsisDir)) {
            throw "NSIS bundle directory not found: $nsisDir"
          }

          $exe = Get-ChildItem -Path $nsisDir -Filter *.exe -File | Sort-Object LastWriteTime -Descending | Select-Object -First 1
          if (-not $exe) { throw "No NSIS .exe found in $nsisDir" }

          $sig = Get-ChildItem -Path $nsisDir -Filter *.sig -File | Sort-Object LastWriteTime -Descending | Select-Object -First 1
          if (-not $sig) { throw "No .sig found in $nsisDir" }
          $sigContent = Get-Content -Path $sig.FullName -Raw

          $assetNameEncoded = [System.Uri]::EscapeDataString($exe.Name)
          $assetUrl = "https://github.com/$repo/releases/download/$tag/$assetNameEncoded"

          $latestJson = @{
            version   = $appVersion
            notes     = "Windows release $tag"
            pub_date  = $pubDate
            platforms = @{
              "windows-x86_64" = @{
                url       = $assetUrl
                signature = $sigContent
              }
            }
          } | ConvertTo-Json -Depth 6

          $latestJson | Out-File -FilePath latest.json -Encoding UTF8

      # 9️⃣ Create release and upload all artifacts (fail fast on gh errors)
      - name: 📤 Create release and upload assets
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $ErrorActionPreference = "Stop"

          gh auth status
          if ($LASTEXITCODE -ne 0) { throw "GitHub CLI auth failed" }

          $tag = "${{ env.RELEASE_TAG }}"

          gh release view $tag -R $env:GITHUB_REPOSITORY *> $null
          if ($LASTEXITCODE -ne 0) {
            gh release create $tag --title "Windows Release $tag" --notes "Automated release" --verify-tag -R $env:GITHUB_REPOSITORY
            if ($LASTEXITCODE -ne 0) { throw "Failed to create release $tag" }
          }

          $folders = @(
            "src-tauri/target/release/bundle/msi",
            "src-tauri/target/release/bundle/nsis"
          )

          foreach ($folder in $folders) {
            if (Test-Path $folder) {
              Get-ChildItem -Path $folder -File | ForEach-Object {
                Write-Host "Uploading $($_.FullName)..."
                gh release upload $tag $_.FullName --clobber -R $env:GITHUB_REPOSITORY
                if ($LASTEXITCODE -ne 0) { throw "Failed to upload $($_.Name) to $tag" }
              }
            }
          }

          gh release upload $tag latest.json --clobber -R $env:GITHUB_REPOSITORY
          if ($LASTEXITCODE -ne 0) { throw "Failed to upload latest.json to $tag" }

          # Maintain a persistent 'latest' release WITHOUT re-tagging on every run
          gh release view latest -R $env:GITHUB_REPOSITORY *> $null
          if ($LASTEXITCODE -ne 0) {
            git rev-parse -q --verify "refs/tags/latest" *> $null
            if ($LASTEXITCODE -ne 0) {
              git tag -a latest -m "Persistent latest marker"
              git push origin latest
            }

            gh release create latest --title "Latest Windows Release" --notes "Auto-synced" -R $env:GITHUB_REPOSITORY
            if ($LASTEXITCODE -ne 0) { throw "Failed to create 'latest' release" }
          }

          gh release upload latest latest.json --clobber -R $env:GITHUB_REPOSITORY
          if ($LASTEXITCODE -ne 0) { throw "Failed to upload latest.json to 'latest' release" }
